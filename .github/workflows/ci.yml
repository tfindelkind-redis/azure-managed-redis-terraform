name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  actions: read
  contents: read
  security-events: write

env:
  TF_VERSION: "1.7.5"
  TFLINT_VERSION: "0.50.3"

jobs:
  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        directory:
          - modules/managed-redis
          - examples/simple
          - examples/with-modules  
          - examples/high-availability
          - examples/multi-region
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      run: terraform fmt -check -recursive -diff
      working-directory: ${{ matrix.directory }}

    - name: Terraform Init
      run: terraform init -backend=false
      working-directory: ${{ matrix.directory }}

    - name: Terraform Validate
      run: terraform validate
      working-directory: ${{ matrix.directory }}

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: terraform-validate
    strategy:
      matrix:
        example:
          - simple
          - with-modules
          - high-availability
          - multi-region
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform  
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Azure CLI Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      if: github.event_name != 'pull_request'

    - name: Terraform Init
      run: terraform init
      working-directory: examples/${{ matrix.example }}

    - name: Terraform Plan
      run: terraform plan -input=false -no-color
      working-directory: examples/${{ matrix.example }}
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      if: github.event_name != 'pull_request'

    - name: Terraform Plan (PR)
      run: terraform plan -input=false -no-color
      working-directory: examples/${{ matrix.example }}
      if: github.event_name == 'pull_request'
      continue-on-error: true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: terraform-validate

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Run tfsec
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        soft_fail: true

  lint:
    name: Terraform Lint
    runs-on: ubuntu-latest
    needs: terraform-validate

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup TFLint
      uses: terraform-linters/setup-tflint@v3
      with:
        tflint_version: ${{ env.TFLINT_VERSION }}

    - name: Init TFLint
      run: tflint --init

    - name: Run TFLint on module
      run: tflint --config=.tflint.hcl modules/managed-redis/

    - name: Run TFLint on examples
      run: |
        for example in examples/*/; do
          echo "Linting $example"
          tflint --config=.tflint.hcl "$example"
        done

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup terraform-docs
      uses: terraform-docs/gh-actions@v1.0.0
      with:
        working-dir: modules/managed-redis
        output-file: README.md
        output-method: inject
        git-push: "false"

    - name: Check if documentation is up to date
      run: |
        if ! git diff --exit-code modules/managed-redis/README.md; then
          echo "::error::Module documentation is not up to date. Run terraform-docs and commit the changes."
          exit 1
        fi

  provider-compatibility:
    name: Provider Compatibility
    runs-on: ubuntu-latest
    strategy:
      matrix:
        azapi_version: ["~> 1.13", "~> 1.14", "~> 1.15"]
        azurerm_version: ["~> 3.70", "~> 3.80", "~> 3.90"]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Update provider versions
      run: |
        sed -i 's/version = "~> 1\.[0-9]*"/version = "${{ matrix.azapi_version }}"/g' modules/managed-redis/versions.tf
        sed -i 's/version = "~> 3\.[0-9]*"/version = "${{ matrix.azurerm_version }}"/g' modules/managed-redis/versions.tf

    - name: Terraform Init
      run: terraform init
      working-directory: modules/managed-redis

    - name: Terraform Validate
      run: terraform validate
      working-directory: modules/managed-redis
