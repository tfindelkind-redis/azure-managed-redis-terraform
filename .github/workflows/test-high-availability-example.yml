name: Test High-Availability Example

on:
  workflow_dispatch:
    inputs:
      cleanup:
        description: 'Clean up resources after testing'
        required: false
        default: true
        type: boolean

permissions:
  id-token: write    # Required for OIDC authentication
  contents: read

env:
  TF_VERSION: "1.7.5"
  ARM_SKIP_PROVIDER_REGISTRATION: "true"

jobs:
  test-high-availability:
    name: Test High-Availability Example
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Azure CLI Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        enable-AzPSSession: false

    - name: Set ARM Environment Variables
      run: |
        echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
        echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
        echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
        echo "ARM_USE_OIDC=true" >> $GITHUB_ENV

    - name: Deploy High-Availability Example
      id: deploy
      run: |
        cd examples/high-availability
        
        # Generate unique resource names
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        REDIS_NAME="redis-ha-test-${TIMESTAMP}"
        
        # Create terraform.tfvars
        cat > terraform.tfvars << EOF
        resource_group_name = "rg-azure-managed-redis-terraform"
        location = "eastus"
        redis_name = "${REDIS_NAME}"
        environment = "testing"
        create_resource_group = false
        EOF
        
        echo "terraform_dir=$(pwd)" >> $GITHUB_OUTPUT
        echo "redis_name=${REDIS_NAME}" >> $GITHUB_OUTPUT
        
        # Initialize and deploy
        terraform init
        terraform plan -input=false
        terraform apply -auto-approve -input=false
        
        echo "✅ High-availability example deployed successfully"

    - name: Test Redis High Availability Features
      run: |
        cd examples/high-availability
        
        # Get connection string
        CONNECTION_STRING=$(terraform output -raw connection_string)
        
        # Install redis-cli for testing
        sudo apt-get update && sudo apt-get install -y redis-tools
        
        # Test basic Redis operations
        echo "Testing Redis connectivity..."
        redis-cli -u "$CONNECTION_STRING" ping
        
        # Test high-availability specific features
        echo "Testing high-availability configuration..."
        
        # Set some test data
        redis-cli -u "$CONNECTION_STRING" SET ha_test_key "high-availability-test-$(date +%s)"
        
        # Test RedisJSON with complex data
        redis-cli -u "$CONNECTION_STRING" JSON.SET ha:config $ '{
          "cluster": {
            "high_availability": true,
            "zones": ["1", "2", "3"],
            "minimum_tls_version": "1.2"
          },
          "test_timestamp": "'$(date -Iseconds)'"
        }'
        
        # Verify data persistence
        HA_RESULT=$(redis-cli -u "$CONNECTION_STRING" GET ha_test_key)
        JSON_RESULT=$(redis-cli -u "$CONNECTION_STRING" JSON.GET ha:config $.cluster.high_availability)
        
        if [[ "$HA_RESULT" == *"high-availability-test"* ]] && [ "$JSON_RESULT" = "true" ]; then
          echo "✅ High-availability Redis test successful"
        else
          echo "❌ High-availability Redis test failed"
          echo "HA result: $HA_RESULT"
          echo "JSON result: $JSON_RESULT"
          exit 1
        fi

    - name: Test Zone Redundancy
      run: |
        cd examples/high-availability
        
        CONNECTION_STRING=$(terraform output -raw connection_string)
        
        # Test that we can perform operations indicating zone redundancy is working
        echo "Testing zone redundancy capabilities..."
        
        # Create multiple keys to test distribution
        for i in {1..10}; do
          redis-cli -u "$CONNECTION_STRING" SET "zone_test_key_$i" "zone_data_$i"
        done
        
        # Verify all keys are accessible
        KEYS_COUNT=$(redis-cli -u "$CONNECTION_STRING" KEYS "zone_test_key_*" | wc -l)
        
        if [ "$KEYS_COUNT" -eq 10 ]; then
          echo "✅ Zone redundancy test successful - all keys accessible"
        else
          echo "❌ Zone redundancy test failed - only $KEYS_COUNT keys found"
          exit 1
        fi

    - name: Display Connection Information
      run: |
        cd examples/high-availability
        
        echo "## High-Availability Example Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Deployment Information" >> $GITHUB_STEP_SUMMARY
        echo "- Redis Name: ${{ steps.deploy.outputs.redis_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- Resource Group: rg-azure-managed-redis-terraform" >> $GITHUB_STEP_SUMMARY
        echo "- Location: East US" >> $GITHUB_STEP_SUMMARY
        echo "- High Availability: Enabled" >> $GITHUB_STEP_SUMMARY
        echo "- Zones: 1, 2, 3" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Status" >> $GITHUB_STEP_SUMMARY
        echo "✅ Deployment: Successful" >> $GITHUB_STEP_SUMMARY
        echo "✅ Connectivity: Working" >> $GITHUB_STEP_SUMMARY
        echo "✅ High Availability: Functional" >> $GITHUB_STEP_SUMMARY
        echo "✅ Zone Redundancy: Verified" >> $GITHUB_STEP_SUMMARY
        echo "✅ RedisJSON Module: Functional" >> $GITHUB_STEP_SUMMARY

    - name: Clean Up Resources
      if: always() && github.event.inputs.cleanup == 'true'
      run: |
        cd examples/high-availability
        
        echo "Cleaning up test resources..."
        terraform destroy -auto-approve -input=false
        echo "✅ Resources cleaned up"
