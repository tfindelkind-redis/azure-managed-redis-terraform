name: Test Geo-Replication Example

on:
  workflow_dispatch:
    inputs:
      cleanup:
        description: 'Clean up resources after testing'
        required: false
        default: true
        type: boolean

permissions:
  id-token: write    # Required for OIDC authentication
  contents: read

env:
  TF_VERSION: "1.7.5"
  ARM_SKIP_PROVIDER_REGISTRATION: "true"

jobs:
  test-geo-replication:
    name: Test Geo-Replication Example
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Azure CLI Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        enable-AzPSSession: false

    - name: Set ARM Environment Variables
      run: |
        echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
        echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
        echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
        echo "ARM_USE_OIDC=true" >> $GITHUB_ENV

    - name: Deploy Geo-Replication Example
      id: deploy
      run: |
        cd examples/geo-replication
        
        # Generate unique resource names
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        PROJECT_NAME="redis-geo-test-${TIMESTAMP}"
        
        # Create terraform.tfvars
        cat > terraform.tfvars << EOF
        project_name = "${PROJECT_NAME}"
        primary_location = "eastus"
        secondary_location = "westus2"
        environment = "testing"
        redis_sku = "Balanced_B1"
        EOF
        
        echo "terraform_dir=$(pwd)" >> $GITHUB_OUTPUT
        echo "project_name=${PROJECT_NAME}" >> $GITHUB_OUTPUT
        
        # Initialize and deploy
        terraform init
        terraform plan -input=false
        terraform apply -auto-approve -input=false
        
        echo "✅ Geo-replication example deployed successfully"

    - name: Test Primary Region Redis
      run: |
        cd examples/geo-replication
        
        # Get primary connection string
        PRIMARY_CONNECTION=$(terraform output -raw primary_connection_string)
        
        # Install redis-cli for testing
        sudo apt-get update && sudo apt-get install -y redis-tools
        
        echo "⏳ Waiting for Azure Redis keys to propagate (this can take 20-40 seconds)..."
        sleep 30
        
        # Retry function for Redis commands
        retry_redis_command() {
          local max_retries=3
          local retry_delay=10
          local attempt=1
          local cmd="$@"
          
          while [ $attempt -le $max_retries ]; do
            output=$(eval "$cmd" 2>&1)
            exit_code=$?
            
            if echo "$output" | grep -q "WRONGPASS\|NOAUTH"; then
              echo "⚠️  Attempt $attempt/$max_retries: Authentication still propagating, waiting ${retry_delay}s..."
              sleep $retry_delay
              attempt=$((attempt + 1))
            elif [ $exit_code -eq 0 ]; then
              echo "$output"
              return 0
            else
              echo "❌ Command failed: $output"
              return 1
            fi
          done
          
          echo "❌ Command failed after $max_retries attempts"
          return 1
        }
        
        # Test primary region
        echo "Testing primary region Redis connectivity with PING..."
        if ! retry_redis_command "redis-cli -u \"$PRIMARY_CONNECTION\" ping"; then
          echo "❌ Primary PING test failed"
          exit 1
        fi
        echo "✅ Primary PING successful"
        
        # Set test data in primary
        echo "Setting test data in primary region..."
        if ! retry_redis_command "redis-cli -u \"$PRIMARY_CONNECTION\" JSON.SET primary:test $ '{
          \"region\": \"primary\",
          \"location\": \"eastus\",
          \"test_data\": \"geo-replication-primary-test\",
          \"timestamp\": \"'$(date -Iseconds)'\"
        }'"; then
          echo "❌ Primary JSON.SET failed"
          exit 1
        fi
        echo "✅ Primary data set successfully"
        
        # Verify primary data
        PRIMARY_RESULT=$(retry_redis_command "redis-cli -u \"$PRIMARY_CONNECTION\" JSON.GET primary:test $.region")
        
        if [ "$PRIMARY_RESULT" = '"primary"' ]; then
          echo "✅ Primary region Redis test successful"
          echo "  - Result: $PRIMARY_RESULT"
        else
          echo "❌ Primary region Redis test failed"
          echo "  - Result: $PRIMARY_RESULT"
          exit 1
        fi

    - name: Test Secondary Region Redis
      run: |
        cd examples/geo-replication
        
        # Get secondary connection string
        SECONDARY_CONNECTION=$(terraform output -raw secondary_connection_string)
        
        # Retry function for Redis commands
        retry_redis_command() {
          local max_retries=3
          local retry_delay=10
          local attempt=1
          local cmd="$@"
          
          while [ $attempt -le $max_retries ]; do
            output=$(eval "$cmd" 2>&1)
            exit_code=$?
            
            if echo "$output" | grep -q "WRONGPASS\|NOAUTH"; then
              echo "⚠️  Attempt $attempt/$max_retries: Authentication still propagating, waiting ${retry_delay}s..."
              sleep $retry_delay
              attempt=$((attempt + 1))
            elif [ $exit_code -eq 0 ]; then
              echo "$output"
              return 0
            else
              echo "❌ Command failed: $output"
              return 1
            fi
          done
          
          echo "❌ Command failed after $max_retries attempts"
          return 1
        }
        
        # Test secondary region
        echo "Testing secondary region Redis connectivity with PING..."
        if ! retry_redis_command "redis-cli -u \"$SECONDARY_CONNECTION\" ping"; then
          echo "❌ Secondary PING test failed"
          exit 1
        fi
        echo "✅ Secondary PING successful"
        
        # Set test data in secondary
        echo "Setting test data in secondary region..."
        if ! retry_redis_command "redis-cli -u \"$SECONDARY_CONNECTION\" JSON.SET secondary:test $ '{
          \"region\": \"secondary\",
          \"location\": \"westus2\",
          \"test_data\": \"geo-replication-secondary-test\",
          \"timestamp\": \"'$(date -Iseconds)'\"
        }'"; then
          echo "❌ Secondary JSON.SET failed"
          exit 1
        fi
        echo "✅ Secondary data set successfully"
        
        # Verify secondary data
        SECONDARY_RESULT=$(retry_redis_command "redis-cli -u \"$SECONDARY_CONNECTION\" JSON.GET secondary:test $.region")
        
        if [ "$SECONDARY_RESULT" = '"secondary"' ]; then
          echo "✅ Secondary region Redis test successful"
          echo "  - Result: $SECONDARY_RESULT"
        else
          echo "❌ Secondary region Redis test failed"
          echo "  - Result: $SECONDARY_RESULT"
          exit 1
        fi

    - name: Test Geo-Replication Search Capabilities
      run: |
        cd examples/geo-replication
        
        PRIMARY_CONNECTION=$(terraform output -raw primary_connection_string)
        SECONDARY_CONNECTION=$(terraform output -raw secondary_connection_string)
        
        # Retry function for Redis commands
        retry_redis_command() {
          local max_retries=3
          local retry_delay=10
          local attempt=1
          local cmd="$@"
          
          while [ $attempt -le $max_retries ]; do
            output=$(eval "$cmd" 2>&1)
            exit_code=$?
            
            if echo "$output" | grep -q "WRONGPASS\|NOAUTH"; then
              echo "⚠️  Attempt $attempt/$max_retries: Authentication still propagating, waiting ${retry_delay}s..."
              sleep $retry_delay
              attempt=$((attempt + 1))
            elif [ $exit_code -eq 0 ]; then
              echo "$output"
              return 0
            else
              echo "❌ Command failed: $output"
              return 1
            fi
          done
          
          echo "❌ Command failed after $max_retries attempts"
          return 1
        }
        
        # Test RediSearch in primary region
        echo "Testing RediSearch in primary region..."
        if ! retry_redis_command "redis-cli -u \"$PRIMARY_CONNECTION\" FT.CREATE idx:products ON JSON PREFIX 1 product: SCHEMA $.name AS name TEXT $.category AS category TAG"; then
          echo "❌ Primary FT.CREATE failed"
          exit 1
        fi
        retry_redis_command "redis-cli -u \"$PRIMARY_CONNECTION\" JSON.SET product:1 $ '{\"name\":\"Laptop\",\"category\":\"Electronics\",\"region\":\"primary\"}'" > /dev/null
        PRIMARY_SEARCH=$(retry_redis_command "redis-cli -u \"$PRIMARY_CONNECTION\" FT.SEARCH idx:products \"Laptop\"")
        echo "✅ Primary RediSearch test successful"
        
        # Test RediSearch in secondary region
        echo "Testing RediSearch in secondary region..."
        if ! retry_redis_command "redis-cli -u \"$SECONDARY_CONNECTION\" FT.CREATE idx:users ON JSON PREFIX 1 user: SCHEMA $.name AS name TEXT $.city AS city TAG"; then
          echo "❌ Secondary FT.CREATE failed"
          exit 1
        fi
        retry_redis_command "redis-cli -u \"$SECONDARY_CONNECTION\" JSON.SET user:1 $ '{\"name\":\"Alice\",\"city\":\"Seattle\",\"region\":\"secondary\"}'" > /dev/null
        SECONDARY_SEARCH=$(retry_redis_command "redis-cli -u \"$SECONDARY_CONNECTION\" FT.SEARCH idx:users \"Alice\"")
        
        if [[ "$PRIMARY_SEARCH" == *"Laptop"* ]] && [[ "$SECONDARY_SEARCH" == *"Alice"* ]]; then
          echo "✅ Geo-replication search capabilities test successful"
        else
          echo "❌ Geo-replication search capabilities test failed"
          exit 1
        fi

    - name: Display Connection Information
      run: |
        cd examples/geo-replication
        
        echo "## Geo-Replication Example Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Deployment Information" >> $GITHUB_STEP_SUMMARY
        echo "- Project Name: ${{ steps.deploy.outputs.project_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- Primary Region: East US" >> $GITHUB_STEP_SUMMARY
        echo "- Secondary Region: West US 2" >> $GITHUB_STEP_SUMMARY
        echo "- SKU: Balanced_B1" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Status" >> $GITHUB_STEP_SUMMARY
        echo "✅ Primary Deployment: Successful" >> $GITHUB_STEP_SUMMARY
        echo "✅ Secondary Deployment: Successful" >> $GITHUB_STEP_SUMMARY
        echo "✅ Primary Connectivity: Working" >> $GITHUB_STEP_SUMMARY
        echo "✅ Secondary Connectivity: Working" >> $GITHUB_STEP_SUMMARY
        echo "✅ RedisJSON (Both Regions): Functional" >> $GITHUB_STEP_SUMMARY
        echo "✅ RediSearch (Both Regions): Functional" >> $GITHUB_STEP_SUMMARY

    - name: Clean Up Resources
      if: always() && github.event.inputs.cleanup == 'true'
      run: |
        cd examples/geo-replication
        
        echo "Cleaning up test resources..."
        terraform destroy -auto-approve -input=false
        echo "✅ Resources cleaned up"
